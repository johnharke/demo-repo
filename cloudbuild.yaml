# cloudbuild.yaml
# This configuration supports deployment to both development and production environments
# with appropriate security controls and approval gates

steps:
  # Step 1: Run static code analysis and security scans
  - name: 'gcr.io/cloud-builders/git'
    id: 'Clone repository'
    args: ['clone', 'https://github.com/johnharke/demo-repo.git']

  - name: 'gcr.io/cloud-builders/npm'
    id: 'Install dependencies'
    args: ['install']

  - name: 'gcr.io/cloud-builders/npm'
    id: 'Run linting'
    args: ['run', 'lint']

  - name: 'gcr.io/cloud-builders/npm'
    id: 'Run unit tests'
    args: ['run', 'test']

  # Step 2: Vulnerability scanning using Snyk (you'll need to set up Snyk integration)
  - name: 'snyk/snyk-cli:latest'
    id: 'Vulnerability scan'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        snyk auth $$SNYK_TOKEN
        snyk test --severity-threshold=high
    secretEnv: ['SNYK_TOKEN']

  # Step 3: Build the application
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Build application'
    args: ['run', 'build']

  # Step 4: Build and push Docker image with Cloud Build's default builder
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Docker image'
    args: [
      'build',
      '-t', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE_NAME}:${SHORT_SHA}',
      '-t', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE_NAME}:latest',
      '.'
    ]

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Docker image'
    args: ['push', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE_NAME}:${SHORT_SHA}']

  # Step 5: Run container security scanning
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Container security scan'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud artifacts docker images scan \
          ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE_NAME}:${SHORT_SHA} \
          --format='json' > /workspace/scan_results.json
        cat /workspace/scan_results.json
        if grep -q "\"severity\": \"CRITICAL\"" /workspace/scan_results.json; then
          echo "Critical vulnerabilities found. Failing build."
          exit 1
        fi

  # Step 6: Deploy to development environment (unusualoptions-d)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy to dev'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "${PROJECT_ID}" = "unusualoptions-d" ]; then
          echo "Deploying to development environment (unusualoptions-d)"
          # Replace with your actual deployment commands
          gcloud run deploy ${_SERVICE_NAME} \
            --image ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE_NAME}:${SHORT_SHA} \
            --region ${_REGION} \
            --platform managed \
            --allow-unauthenticated
        else
          echo "Skipping deployment to development (current project is not unusualoptions-d)"
        fi

# Store build artifacts
artifacts:
  objects:
    location: 'gs://${PROJECT_ID}-artifacts/builds/${BUILD_ID}'
    paths: ['scan_results.json', 'test-results/**/*']

# Required for security scanning
availableSecrets:
  secretManager:
    - versionName: projects/${PROJECT_ID}/secrets/snyk-token/versions/latest
      env: 'SNYK_TOKEN'

# Timeouts
timeout: '3600s'

# Substitution variables
substitutions:
  _REGION: 'us-central1'
  _REPOSITORY: 'demo-repo'
  _IMAGE_NAME: 'options-image'
  _SERVICE_NAME: 'options-promotion'
  _NODE_ENV: 'development'

# Trigger options
options:
  logging: CLOUD_LOGGING_ONLY
  dynamicSubstitutions: true
  env:
    - 'NODE_ENV=$_NODE_ENV'
